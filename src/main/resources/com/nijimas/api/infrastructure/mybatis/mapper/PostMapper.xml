<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.nijimas.api.infrastructure.mybatis.mapper.PostMapper">

    <insert id="insert" parameterType="com.nijimas.api.core.entity.PostEntity">
        insert into "posts" ( post_id, uid, main_category, post_text, photo_url, expense, location, public_type_no)
        values (
        #{postId},
        #{uid},
        #{mainCategory},
        case when #{postText} = '' then null else #{postText} end,
        case when #{photoUrl} = '' then null else #{photoUrl} end,
        #{expense},
        #{location},
        #{publicTypeNo}
        )
    </insert>

    <select id="existsById" resultType="java.lang.Integer">
        SELECT 1
        FROM "posts"
        WHERE post_id = #{postId}
    </select>

    <select id="findById" resultMap="postResultMap">
        SELECT
        p.post_id,
        u.uid,
        u.username,
        u.profile_image_url,
        p.main_category,
        ps1.sub_category AS subCategory1,
        ps2.sub_category AS subCategory2,
        p.post_text,
        p.photo_url,
        p.expense,
        p.location,
        p.public_type_no,
        p.created_at
        FROM "posts" p
        JOIN "users" u ON p.uid = u.uid
        LEFT JOIN "post_subcategories" ps1
        ON p.post_id = ps1.post_id AND ps1.subcategory_no = '1'
        LEFT JOIN "post_subcategories" ps2
        ON p.post_id = ps2.post_id AND ps2.subcategory_no = '2'
        WHERE p.post_id = #{postId}
    </select>

    <select id="findOwn" resultMap="postResultMap">
        SELECT
        p.post_id,
        u.uid,
        u.username,
        u.profile_image_url,
        p.main_category,
        sc.sub_category1 AS subCategory1,
        sc.sub_category2 AS subCategory2,
        p.post_text,
        p.photo_url,
        p.expense,
        p.location,
        p.public_type_no,
        p.created_at,
        CASE WHEN f.uid IS NOT NULL THEN TRUE ELSE FALSE END AS isFavorite
        FROM posts p
        JOIN users u ON p.uid = u.uid
        LEFT JOIN (
        SELECT
        ps.post_id,
        MAX(CASE WHEN ps.category_no = '1' THEN s.category_name ELSE NULL END) AS sub_category1,
        MAX(CASE WHEN ps.category_no = '2' THEN s.category_name ELSE NULL END) AS sub_category2
        FROM post_subcategories ps
        JOIN sub_categories s ON ps.category_id = s.category_id
        GROUP BY ps.post_id
        ) sc ON p.post_id = sc.post_id
        LEFT JOIN "favorites" f
        ON p.post_id = f.post_id AND f.uid = #{uid}
        WHERE p.uid = #{uid}
        ORDER BY p.post_id DESC
        LIMIT 50
    </select>

    <resultMap id="postResultMap" type="com.nijimas.api.core.dto.PostDto">
        <result column="photo_url" property="photoUrl"
                typeHandler="com.nijimas.api.infrastructure.typehandler.CommaSeparatedStringTypeHandler"/>
    </resultMap>
</mapper>